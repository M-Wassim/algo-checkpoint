FUNCTION dot_product(v1,v2 :ARRAY_OF INTEGER) : INTEGER
VAR
   ps : INTEGER; 
BEGIN
 ps := 0 
    FOR i FROM 0 TO v1.length STEP step  DO
       
            ps := ps + v1[i] * v2[i]  ;
        
    END_FOR
    return ps ;
END
// function to get vectors that return an array of vectors 
// FUNCTION get_vectors(n) : array
// VAR
//     set_declarations
// BEGIN
//     set_instructions
//     RETURN array ;
// END

ALGORITHM product
VAR
    i,j,n:INTEGER;
    vectors:ARRAY_OF[ARRAY_OF[integer]];
BEGIN
 REPEAT
     read(n)
 UNTIL (n%2 === 0)

    vectors := function get_vectors(n);
     
    FOR i FROM 0 TO vectors.length STEP step  DO
        FOR j FROM i+1 TO vectors.length     STEP step  DO
            IF (dot_product(vectors[i],vectors[j]) === 0) THEN
                write (vectors[i] , 'and' , vectors[j] , "are orthogonals");
            END_IF
        END_FOR
    END_FOR
END